<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile Page</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <header class="navbar">
        <div class="logo">
            <h1>SkillHub</h1>
        </div>
    </header>
    <main>
        <div class="background">
            <img src="/images/Background_image.jpg" alt="">
        </div>
        <div class="profile">
            <div class="profileHeader">
                <div class="profilePhoto">
                    <!-- Profile photo -->
                    <% console.log(user);%>
                    <img id="profilePhoto" src="<%= user.profile_photo ? user.profile_photo.replace(/\\/g, '/') : '/images/default_profile_photo.jpg' %>" alt="Profile Photo">
                    
                    <!-- Overlay for enlarged photo -->
                    <div id="photoOverlay" class="overlay">
                        <div class="overlayContent">
                            <img id="enlargedPhoto" src="<%= user.profile_photo ? user.profile_photo : '/images/default_profile_photo.jpg' %>" alt="Enlarged Photo">
                            <button id="changePhotoBtn">Change Profile Photo</button>
                            <button id="deletePhotoBtn">Delete Profile Photo</button>
                        </div>
                    </div>
                    
                    <!-- Form to upload a new profile photo -->
                    <form id="uploadPhotoForm" action="/upload_profile_photo" method="POST" enctype="multipart/form-data" style="display: none;">
                        <input type="file" name="profile_photo" accept="image/*" required>
                        <button type="submit">Upload</button>
                    </form>
                </div>
                
                <div id="editProfileModal" class="modal">
                    <div class="modal-content">
                        <span class="close" id="closeModal">&times;</span>
                        <h2>Edit Profile</h2>
                        <form id="editProfileForm">
                            <label for="username">Username:</label>
                            <input type="text" id="username" name="username" value="<%= user.username %>">
            
                            <label for="availability">Availability:</label>
                            <select id="availability" name="availability">
                                <option value="yes" <%= user.availability === 'yes' ? 'selected' : '' %> >Yes</option>
                                <option value="no" <%= user.availability === 'no' ? 'selected' : '' %> >No</option>
                            </select>
            
                            <button type="submit">Save Changes</button>
                        </form>
                    </div>
                </div>
                <div class="profileDetails">
                    <h2 class="name"><%= user.username %></h2>
                    <p class="availability">Available for Work: <%= user.availability %></p>
                    <p class="rating">Rating: 
                        <% for (let i = 1; i <= 5; i++) { %>
                            <% if (i <= user.rating) { %>
                                ★
                            <% } else { %>
                                ☆
                            <% } %>
                        <% } %>
                    </p>
                </div>
                <button class="editProfile">Edit Profile</button>
            </div>

            <!-- Modal for Adding Skills -->
            <div id="skillModal" class="modal">
                <div class="modal-content">
                    <span class="skillClose" class="close">&times;</span>
                    <h2>Select Skills</h2>
                    <form id="addSkillForm">
                        <div id="skillList">
                <!-- Skill options will be dynamically added here -->
                        </div>
                        <button type="submit">Add Skills</button>
                    </form>
                </div>
            </div>
            <div class="skills">
                <h3>Skills</h3>
                <div class="skillsRow">
                    <% if (skills.length > 0) { %>
                        <% skills.forEach(skill => { %>
                            <div class="skillItem">
                                <span><%= skill.skill_name %></span>
                                <button class="removeSkill" data-skill-id="<%= skill.skill_id %>">✖</button>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <p>No skills added yet.</p>
                    <% } %>
                    <button class="addSkill">Add Skill</button>
                </div>
            </div>
            <div class="showcases">
                <h3>Showcases</h3>
                <div class="showcaseGrid" id="showcaseGrid">
                    <% if (showcases.length > 0) { %>
                        <% showcases.forEach(showcase => { %>
                            <div class="skillItem">
                                <span><%= showcase.title %></span>
                                <div><%= showcase.description %></div>
                                <% if (showcase.image_url) { %> <!-- Check if the image_url exists -->
                                    <img src="<%= showcase.image_url %>" alt="Showcase Image" style="max-width: 200px; height: auto;"> <!-- Display the image -->
                                <% } else { %>
                                    <p>No image available</p> <!-- Message if no image is available -->
                                <% } %>
                                <button class="removeShowcase" data-showcase-id="<%= showcase.showcase_id %>">✖</button>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <p>No showcases added yet.</p>
                    <% } %>
                    <!-- Showcase items will be dynamically added here -->
                </div>
                <button id="addShowcaseBtn">Add Showcase</button>
            </div>
            <!-- Modal for Adding Showcase -->
<!-- Modal for Adding Showcase -->
            <div id="addShowcaseModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Add New Showcase</h2>
        <form id="addShowcaseForm" enctype="multipart/form-data">
            <label for="title">Title:</label>
            <input type="text" id="title" name="title" required>
            <label for="description">Description:</label>
            <textarea id="description" name="description" required></textarea>
            <label for="image">Image:</label>
            <input type="file" id="image" name="image" accept="image/*" required>
            <label for="skills">Skills:</label>
            <select id="skills" name="skills" multiple required>
                <!-- Skill options will be dynamically populated here -->
            </select>
            <button type="submit">Add Showcase</button>
        </form>
    </div>
            </div>

            <div class="posts">
                <h3>Posts</h3>
                    <div class="postGrid" id="postGrid">
                        <% if (posts.length > 0) { %>
                            <% posts.forEach(post => { %>
                                <div class="postItem">
                                    <h4><%= post.title %></h4>
                                    <div><%= post.content %></div>
                                    <button class="removePost" data-post-id="<%= post.post_id %>">✖</button>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <p>No posts added yet.</p>
                        <% } %>
                    </div>
                        <button class="addPost">Add Post</button>
                <!-- <a href="#" class="showMorePosts">Show More Posts</a> -->
            </div>

            <div id="addPostModal" class="modal">
                <div class="modal-content">
                    <span id="closePostModal" class="close"> &times;</span>
                <form id="addPostForm">
                    <input type="text" id="postTitle" name="title" placeholder="Post Title" required>
                    <textarea id="postContent" name="content" placeholder="Post Content" required></textarea>
                    <select id="postSkills" name="skills" multiple required>
                        <!-- Dynamically populate with skill options -->
                    </select>
                    <button type="submit">Add Post</button>
                </form>

                </div>
                
            </div>
        </div>
    </main>
    <script>
// Handle form submission



document.addEventListener('DOMContentLoaded', function () {
    document.querySelector('.addPost').addEventListener('click', function() {
    document.getElementById('addPostModal').style.display = 'block';
    fetch('/skills')
    .then(response => response.json())
    .then(data => {
        const skillsSelect = document.getElementById('postSkills');
        skillsSelect.innerHTML = '';
        data.skills.forEach(skill => {
            const option = document.createElement('option');
            option.value = skill.skill_id;
            option.textContent = skill.skill_name;
            skillsSelect.appendChild(option);
        });
    });
});
    document.getElementById('closePostModal').addEventListener('click', function () {
            document.getElementById('addPostModal').style.display = 'none';
        });
    document.getElementById('addPostForm').addEventListener('submit', function(event) {
    event.preventDefault();

    const title = document.getElementById('postTitle').value;
    const content = document.getElementById('postContent').value;
    const skills = Array.from(document.getElementById('postSkills').selectedOptions).map(option => option.value);

    const formData = {
        title: title,
        content: content,
        skills: JSON.stringify(skills)
    };

    fetch('/add_post', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Code to add the new post to the grid dynamically
            document.getElementById('addPostModal').style.display = 'none';
            document.getElementById('addPostForm').reset();
        } else {
            alert('Failed to add post.');
        }
    })
    .catch(error => {
        console.error('Error adding post:', error);
    });
});
    document.querySelectorAll('.postItem .removePost').forEach(button => {
    button.addEventListener('click', function() {
        const postId = this.getAttribute('data-post-id');

        // Confirm deletion
        if (!confirm('Are you sure you want to delete this post?')) {
            return;
        }

        // Send a request to delete the post
        fetch('/delete_post', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ postId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                // this.parentElement.remove(); // Remove the post from the page
            } else {
                alert(data.message || 'Failed to delete post.');
            }
        })
        .catch(error => {
            console.error('Error deleting post:', error);
        });
    });
});

    document.querySelectorAll('.removeShowcase').forEach(button => {
    button.addEventListener('click', function() {
        const showcaseId = this.getAttribute('data-showcase-id');

        // Confirm deletion
        if (!confirm('Are you sure you want to delete this showcase?')) {
            return;
        }

        // Send a request to delete the showcase
        fetch('/delete_showcase', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ showcaseId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                // Optionally remove the deleted showcase from the DOM
                // this.parentElement.remove(); // Remove the showcase from the page
            } else {
                alert(data.message || 'Failed to delete showcase.');
            }
        })
        .catch(error => {
            console.error('Error deleting showcase:', error);
        });
    });
});
    document.getElementById('addShowcaseForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission behavior

    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    const imageFile = document.getElementById('image').files[0];
    const skills = Array.from(document.getElementById('skills').selectedOptions).map(option => option.value);

    // Create a FormData object to handle the form submission with a file
    const formData = new FormData();
    formData.append('title', title);
    formData.append('description', description);

    if (imageFile) {
        formData.append('image', imageFile); // Append the image file if present
    }

    formData.append('skills', JSON.stringify(skills)); // Convert skills array to a JSON string and append it

    // Send data to the server via fetch API
    fetch('/add_showcase', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // addShowcaseToGrid(data.showcase); // Function to add showcase to the grid dynamically
            document.getElementById('addShowcaseModal').style.display = 'none'; // Hide the modal
            document.getElementById('addShowcaseForm').reset(); // Reset the form after successful submission
        } else {
            alert('Failed to add showcase: ' + data.message); // Display error message if the addition fails
        }
    })
    .catch(error => {
        console.error('Error adding showcase:', error);
    });
});

    // Open the modal
document.getElementById('addShowcaseBtn').addEventListener('click', function() {
    document.getElementById('addShowcaseModal').style.display = 'block';
    fetch('/skills')
    .then(response => response.json())
    .then(data => {
        const skillsSelect = document.getElementById('skills');
        skillsSelect.innerHTML = '';
        data.skills.forEach(skill => {
            const option = document.createElement('option');
            option.value = skill.skill_id;
            option.textContent = skill.skill_name;
            skillsSelect.appendChild(option);
        });
    });
});

// Close the modal
document.querySelector('#addShowcaseModal .close').addEventListener('click', function() {
    document.getElementById('addShowcaseModal').style.display = 'none';
});

// Function to add showcase to the grid
// function addShowcaseToGrid(showcase) {
//     const showcaseGrid = document.getElementById('showcaseGrid');
//     const showcaseItem = document.createElement('div');
//     showcaseItem.className = 'showcaseItem';
//     showcaseItem.innerHTML = `
//         <h4>${showcase.title}</h4>
//         <p>${showcase.description}</p>
//         <img src="${showcase.image_url}" alt="${showcase.title}" style="width:100%;">
//     `;
//     showcaseGrid.appendChild(showcaseItem);
// }


    const profilePhoto = document.getElementById('profilePhoto');
    const photoOverlay = document.getElementById('photoOverlay');
    const enlargedPhoto = document.getElementById('enlargedPhoto');
    const changePhotoBtn = document.getElementById('changePhotoBtn');
    const deletePhotoBtn = document.getElementById('deletePhotoBtn');
    const uploadPhotoForm = document.getElementById('uploadPhotoForm');

    // Show overlay and enlarged photo on click
    profilePhoto.addEventListener('click', function () {
        photoOverlay.style.display = 'flex';
    });

    // Hide overlay on clicking outside the enlarged photo
    photoOverlay.addEventListener('click', function (event) {
        if (event.target === photoOverlay) {
            photoOverlay.style.display = 'none';
        }
    });

    // Show upload form when "Change Profile Photo" button is clicked
    changePhotoBtn.addEventListener('click', function () {
        uploadPhotoForm.style.display = 'block';
        photoOverlay.style.display = 'none'; // Hide overlay
    });

    // Handle delete photo action
    deletePhotoBtn.addEventListener('click', function () {
        // Make an AJAX request to delete the profile photo
        fetch('/delete_profile_photo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ action: 'delete' })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove profile photo from UI
                profilePhoto.src = '/images/default_profile_photo.jpg';
                photoOverlay.style.display = 'none'; // Hide overlay
            } else {
                alert('Failed to delete photo');
            }
        })
        .catch(error => {
            console.error('Error deleting photo:', error);
        });
    });

    document.querySelector('.editProfile').addEventListener('click', function () {
            document.getElementById('editProfileModal').style.display = 'block';
        });

        // Close the modal when the close button is clicked
        document.getElementById('closeModal').addEventListener('click', function () {
            document.getElementById('editProfileModal').style.display = 'none';
        });

        // Handle form submission
        document.getElementById('editProfileForm').addEventListener('submit', function (event) {
    event.preventDefault();

    const username = document.getElementById('username').value.trim();
    const availability = document.getElementById('availability').value.trim();

    if (!username || !availability) {
        alert('Username and availability cannot be empty.');
        return;
    }

    console.log("Username:", username);
    console.log("Availability:", availability);

    // Send the updated data to the server
    fetch('/update_profile', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, availability })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Profile updated successfully!');
            location.reload(); // Reload the page to show updated data
        } else {
            alert('Failed to update profile.');
        }
    })
    .catch(error => {
        console.error('Error updating profile:', error);
    });
});
    const skillModal = document.getElementById('skillModal');
    const openSkillModalButton = document.querySelector('.addSkill');
    const closeModalButton = document.querySelector('.modal .skillClose');
    const skillList = document.getElementById('skillList');

    openSkillModalButton.addEventListener('click', function () {
        fetch('/skills') // Fetch available skills
            .then(response => response.json())
            .then(data => {
                skillList.innerHTML = ''; // Clear existing options

                data.skills.forEach(skill => {
                    const skillOption = document.createElement('div');
                    skillOption.className = 'skillOption';
                    skillOption.innerHTML = `
                        <input type="checkbox" id="skill-${skill.skill_id}" value="${skill.skill_id}">
                        <label for="skill-${skill.skill_id}">${skill.skill_name}</label>
                    `;
                    skillList.appendChild(skillOption);
                });

                skillModal.style.display = 'block'; // Show modal
            })
            .catch(error => console.error('Error fetching skills:', error));
    });

    closeModalButton.addEventListener('click', function () {
        skillModal.style.display = 'none'; // Hide modal
    });

    document.getElementById('addSkillForm').addEventListener('submit', function (event) {
        event.preventDefault();

        const selectedSkills = Array.from(document.querySelectorAll('#skillList input:checked'))
            .map(input => input.value);

        fetch('/update_skills', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedSkills })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Skills updated successfully!');
                location.reload(); // Reload page to show updated skills
            } else {
                alert('Failed to update skills.');
            }
        })
        .catch(error => console.error('Error updating skills:', error));
    });
    document.querySelectorAll('.removeSkill').forEach(button => {
        button.addEventListener('click', function () {
            const skillId = this.getAttribute('data-skill-id');

            fetch('/remove_skill', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ skillId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.parentElement.remove(); // Remove skill from UI
                } else {
                    alert('Failed to remove skill.');
                }
            })
            .catch(error => console.error('Error removing skill:', error));
        });
    });
});
    </script>
</body>
</html>