<%- include("partials/header") -%>
<style>
    /* Set the body and html to take the full height of the viewport */
/* Set the body and html to take the full height of the viewport */
html, body {
    height: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    font-family: Arial, sans-serif; /* Use a clean font */
    background-color: #f4f4f9; /* Light background color for the body */
}

/* Ensure the header stays at the top */


/* Style the main section */
main {
    flex-grow: 1;
    padding: 20px;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center; /* Center the content horizontally */
}

/* Notification title styling */
main h2 {
    margin-bottom: 20px;
    color: #333;
    font-size: 24px;
}

/* Notification box styling */
.notification {
    background-color: #fafafa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    width: 100%;
    max-width: 600px; /* Set max width to prevent overly wide containers */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Notification text styling */
.notification p {
    margin: 10px 0;
    font-size: 16px;
    color: #555;
}

/* Buttons styling */
button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    margin-right: 10px;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

/* Chat button */
a button {
    background-color: #28a745;
}

a button:hover {
    background-color: #218838;
}

/* Footer should always stay at the bottom */



/* Footer should always stay at the bottom */

</style>
    <!-- Notifications -->
    <main>
        <h2>Notifications</h2>
        <% if (invitations && invitations.length > 0) { %>
            <% invitations.forEach(invitation => { %>
                <div class="notification">
                    <p><strong>From:</strong> <%= invitation.sender_username %></p>
                    <p><strong>Status:</strong> <%= invitation.status.charAt(0).toUpperCase() + invitation.status.slice(1) %></p>
                    <p><strong>Sent At:</strong> <%= new Date(invitation.created_at).toLocaleDateString() %></p>
                    <% if (invitation.status === 'pending') { %>
                        <form id="responseForm" action="/invitations/respond" method="POST" onsubmit="return handleFormSubmit(this);">
                            <input type="hidden" name="invitationId" value="<%= invitation.invitation_id %>">
                            <button type="button" onclick="submitResponse('accepted')">Accept</button>
                            <button type="button" onclick="submitResponse('rejected')">Reject</button>
                        </form>
                    <% } else if (invitation.status === 'accepted') { %>
                        <a href="/chat/<%= invitation.sender_id %>">
                            <button>Chat with <%= invitation.sender_username %></button>
                        </a>
                    <% } %>
                </div>
            <% }) %>
        <% } else { %>
            <p>No notifications found.</p>
        <% } %>
    </main>

    <!-- Footer Section -->
    <%- include("partials/footer") -%>

    <script>
        // Handle form submission with AJAX
        function submitResponse(response) {
            const form = document.getElementById('responseForm');
            const formData = new FormData(form);
            formData.append('response', response);
    
            fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    invitationId: formData.get('invitationId'),
                    response: response
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert(data.message); // Display the server response message
                    location.reload(); // Reload the page to reflect the updated status
                } else if (data.error) {
                    alert('Error: ' + data.error); // Display the error message
                } else {
                    alert('Unknown response from server');
                }
            })
            .catch(error => {
                console.error('Error handling invitation response:', error);
                alert('Failed to respond to invitation');
            });
    
            return false; // Prevent the default form submission
        }
    
        function handleFormSubmit(form) {
            // This function will be overridden by submitResponse
            return false;
        }
    </script>
</body>
</html>